<?xml version="1.0"?>
<?xml-stylesheet href="chrome://global/skin/" type="text/css"?>

<dialog id="editRegtype" title="Edit Registration Type" xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul" buttons="accept,cancel" ondialogaccept="onAccept()">
<script>
<![CDATA[

var storageService = Components.classes["@mozilla.org/storage/service;1"]
                    .getService(Components.interfaces.mozIStorageService);

var dbFile = Components.classes["@mozilla.org/file/directory_service;1"]
                .getService(Components.interfaces.nsIProperties)
                .get("ProfD", Components.interfaces.nsIFile);
dbFile.append("bonjourfoxy.sqlite");
var DBConn = storageService.openDatabase(dbFile);

var serviceID = window.arguments[0];

function addServiceSubtypeItem(id,label,subtype)   {
    var newLabelLabel = document.createElement('label');
    newLabelLabel.setAttribute('value', label);
    var newLabelSubtype = document.createElement('label');
    newLabelSubtype.setAttribute('value', subtype);
    var newListItem = document.createElement('listitem');
    newListItem.appendChild(newLabelLabel);
    newListItem.appendChild(newLabelSubtype);
    newListItem.setAttribute('value',id);
    document.getElementById('lbSubtypes').appendChild(newListItem);
}

function regtypesInit()  {
    var regtype="", scheme="", label="";
    if (serviceID!="new")   {
        var sqlGetServiceInfo = DBConn.createStatement("            \
SELECT                                                              \
    Services.regtype as regtype,                                    \
    Services.scheme as scheme,                                      \
    Services.label as label                                         \
FROM Services WHERE Services.id = ?1                                ");
        sqlGetServiceInfo.bindInt32Parameter(0,serviceID)
        while (sqlGetServiceInfo.executeStep()) {
            regtype = sqlGetServiceInfo.getUTF8String(0);
            scheme = sqlGetServiceInfo.getUTF8String(1);
            label = sqlGetServiceInfo.getUTF8String(2);
        }
        var sqlGetServiceSubtypes = DBConn.createStatement("        \
SELECT                                                              \
    ServiceSubtypes.id as id,                                       \
    ServiceSubtypes.label as label,                                 \
    ServiceSubtypes.subtype as subtype                              \
FROM ServiceSubtypes WHERE ServiceSubtypes.s_id = ?1                ");
        sqlGetServiceSubtypes.bindInt32Parameter(0,serviceID);
        while (sqlGetServiceSubtypes.executeStep()) {
            addServiceSubtypeItem(
                sqlGetServiceSubtypes.getInt32(0),
                sqlGetServiceSubtypes.getUTF8String(1),
                sqlGetServiceSubtypes.getUTF8String(2));
        }
    }
    document.getElementById("tbRegistrationType").setAttribute('value',regtype);
    document.getElementById("tbLabel").setAttribute('value',label);
    document.getElementById("tbScheme").setAttribute('value',scheme);

}
document.addEventListener("DOMContentLoaded", regtypesInit, false);

function subtypesCommandHandler(event)  {
    var label = "", subtype = "", item = null;
    var mode = event.explicitOriginalTarget.id;
    if (mode == 'edit'||mode=='delete')   {
        item = document.getElementById('lbSubtypes').selectedItem;
        label = item.childNodes[0].value;
        subtype = item.childNodes[1].value;
    }
    if (mode == 'delete' && item)   {
        var prompts = Components.classes["@mozilla.org/embedcomp/prompt-service;1"]
                        .getService(Components.interfaces.nsIPromptService);
        var result = prompts.confirm(window, "Delete Subtype", ["Are you sure you want to delete ",label,"?"].join(''));
        if (result) {
            var itemParent = item.parentNode;
            itemParent.removeChild(item);
        }
    } else {
        var params = {in:{label: label, subtype: subtype}, out:null};
        window.openDialog('chrome://bonjourfoxy/content/subtypes.xul','','chrome, dialog, modal',params).focus();
        if (params.out) {
            if (item)   {
                item.childNodes[0].value = params.out.label;
                item.childNodes[1].value = params.out.subtype;
            } else {
                addServiceSubtypeItem("new",params.out.label,params.out.subtype);
            }   
        }
    }
    var prefs = Components.classes["@mozilla.org/preferences-service;1"]
                .getService(Components.interfaces.nsIPrefService);
    prefs = prefs.getBranch("extensions.bonjourfoxy.");
}

function onAccept() {
    var regtype = document.getElementById('tbRegistrationType').value;
    var label = document.getElementById('tbLabel').value;
    var scheme = document.getElementById('tbScheme').value;
    var subtypes = [];
    var lbSubtypeItems = document.getElementById('lbSubtypes').getElementsByTagName('listitem');
    if (serviceID=='new')   {
        var sqlInsertServiceInfo = DBConn.createStatement("             \
INSERT INTO Services (regtype, label, scheme) VALUES (?1, ?2, ?3);      \
UPDATE ServicesLastInsert row_id = last_insert_rowid();");
        sqlInsertServiceInfo.bindUTF8StringParameter(0,regtype);
        sqlInsertServiceInfo.bindUTF8StringParameter(1,label);
        sqlInsertServiceInfo.bindUTF8StringParameter(2,scheme);
        try { sqlInsertServiceInfo.execute(); }
        catch (e) { 
            if (DBConn.lastError == 19)   {
                window.alert("Problem inserting Service Info: Constrain failure");
            } else {
                window.alert("Problem inserting Service Info:\n" + this.DBConn.lastErrorString);
            }
        }
        var sqlGetServiceID = DBConn.createStatement("SELECT row_id FROM ServicesLastInsert;");
        while (sqlGetServiceID.executeStep())   {
            try {
                serviceID=sqlGetServiceID.getInt32(0);
            }
            catch (e) {
                window.alert('Problem retrieving Service Info ID:\n' + this.DBConn.lastErrorString);
            }
        }
        var sqlInsertServiceSubtype = DBConn.createStatement("          \
INSERT INTO ServiceSubtypes (s_id, label, subtype)                      \
VALUES (?1, ?2, ?3);               ");
        for (var i=0;i<lbSubtypeItems.length;i++)   {
            var sublabel = lbSubtypeItems[i].childNodes[0].value;
            var subtype = lbSubtypeItems[i].childNodes[1].value;
            sqlInsertServiceSubtype.bindInt32Parameter(0,serviceID);
            sqlInsertServiceSubtype.bindUTF8StringParameter(1,sublabel);
            sqlInsertServiceSubtype.bindUTF8StringParameter(2,subtype);
            try { sqlInsertServiceSubtype.execute(); }
            catch (e) { 
                if (DBConn.lastError == 19)   {
                    window.alert('Problem inserting subtype: Constrain failure');
                } else {
                    window.alert('Problem inserting subtype: ' + this.DBConn.lastErrorString);
                }
                return false;
            }
            sqlInsertServiceSubtype.reset();
        }
    } else {
        var sqlUpdateServiceInfo = DBConn.createStatement("UPDATE Services SET regtype=?1, label=?2, scheme=?3 WHERE id=?4;");
        sqlUpdateServiceInfo.bindUTF8StringParameter(0,regtype);
        sqlUpdateServiceInfo.bindUTF8StringParameter(1,label);
        sqlUpdateServiceInfo.bindUTF8StringParameter(2,scheme);
        sqlUpdateServiceInfo.bindUTF8StringParameter(3,serviceID);
        try { sqlUpdateServiceInfo.execute(); }
        catch (e) { 
            if (DBConn.lastError == 19)   {
                window.alert("Problem inserting Service Info: Constrain failure");
            } else {
                window.alert("Problem inserting Service Info:\n" + this.DBConn.lastErrorString);
            }
        }
        var subtypesKeep = [];
        for (var i=0;i<lbSubtypeItems.length;i++)   {
            var subItemValue = lbSubtypeItems[i].value;
            if (subItemValue!="new")    {
                subtypesKeep.push(lbSubtypeItems[i].value);
                var updateSubtypeInfo = DBConn.createStatement("UPDATE ServiceSubtypes SET label=?1, subtype=?2 WHERE id=?3 AND s_id=?4");
                updateSubtypeInfo.bindUTF8StringParameter(0,lbSubtypeItems[i].childNodes[0].value);
                updateSubtypeInfo.bindUTF8StringParameter(1,lbSubtypeItems[i].childNodes[1].value);
                updateSubtypeInfo.bindInt32Parameter(2,subItemValue);
                updateSubtypeInfo.bindInt32Parameter(3,serviceID);
                try { updateSubtypeInfo.execute(); }
                catch (e) { 
                    if (DBConn.lastError == 19)   {
                        window.alert("Problem inserting Service Info: Constrain failure");
                    } else {
                        window.alert("Problem inserting Service Info:\n" + this.DBConn.lastErrorString);
                    }
                }
            }
        }
        try {
            DBConn.executeSimpleSQL("DELETE FROM ServiceSubtypes WHERE s_id=" +
            serviceID + ((subtypesKeep.length>0) ? " AND id !=" + subtypesKeep.join(' AND id !=') : ""));
        }
        catch (e)  {
            alert("Problem removing subtype(s): " + DBConn.lastErrorString);
        }
        for (var i=0;i<lbSubtypeItems.length;i++)   {
            var subItemValue = lbSubtypeItems[i].value;
            if (subItemValue=="new")    {
                var insertSubtypeInfo = DBConn.createStatement("INSERT INTO ServiceSubtypes (label, subtype, s_id) VALUES (?1, ?2, ?3);");
                insertSubtypeInfo.bindUTF8StringParameter(0,lbSubtypeItems[i].childNodes[0].value);
                insertSubtypeInfo.bindUTF8StringParameter(1,lbSubtypeItems[i].childNodes[1].value);
                insertSubtypeInfo.bindInt32Parameter(2,serviceID);
                try { insertSubtypeInfo.execute(); }
                catch (e) { 
                    if (DBConn.lastError == 19)   {
                        window.alert("Problem inserting Service Subtype Info: Constrain failure");
                    } else {
                        window.alert("Problem inserting Service Subtype Info:\n" + this.DBConn.lastErrorString);
                    }
                }
                
            }
        }
    }
    var now = new Date();
    var prefs = Components.classes["@mozilla.org/preferences-service;1"]
                .getService(Components.interfaces.nsIPrefService);
    prefs = prefs.getBranch("extensions.bonjourfoxy.");
    prefs.setIntPref("hts", Math.round(now.getTime()/1000.0));
    return true;
}

]]>
</script>
<label style="font-weight: bold; font-size: 1.1em;" value="Edit Registration Type"/>
<hbox align="center">
<label style="width: 11em;" value="Registration Type"/>
<textbox flex="1" value="_http._tcp." id="tbRegistrationType" />
</hbox>
<hbox align="center">
<label style="width: 11em;" value="Label"/>
<textbox flex="1" value="Websites" id="tbLabel" />
</hbox>
<hbox align="center">
<label style="width: 11em;" value="Scheme"/>
<textbox flex="1" id="tbScheme" value='http://${iftxtvalue:u:${txtvalue:u}}${iftxtvalue:u:${iftxtvalue:p::${txtvalue:p}}}${iftxtvalue:u:@}${srv:hostname}:${srv:port}/${txtvalue:path}' />
</hbox>
<hbox>
<label style="width: 11em;" value="Subtypes"/>
<groupbox class="inset">
<listbox id="lbSubtypes" flex="1" rows="4">
    <listcols>
	<listcol flex="1" />
	<splitter class="tree-splitter" />
	<listcol flex="1" />
    </listcols>
    <listhead>
	<listheader label="Label" />
	<listheader label="Subtype" />
    </listhead>
</listbox>
 <hbox>
 <spacer flex="1" />
 <button label="New" oncommand="subtypesCommandHandler(event)" id="new" />
 <button label="Edit" oncommand="subtypesCommandHandler(event)" id="edit" />   
 <button label="Delete" oncommand="subtypesCommandHandler(event)" id="delete" />
 </hbox>
</groupbox>
</hbox>
</dialog>