<?xml version="1.0"?>
<?xml-stylesheet href="chrome://browser/content/places/places.css"?>
<?xml-stylesheet href="chrome://global/skin/" type="text/css"?>
<?xml-stylesheet href="chrome://browser/skin/places/places.css"?>
<?xml-stylesheet href="list.css"?>
<!DOCTYPE page SYSTEM "chrome://bonjourfoxy/locale/bonjourfoxy.dtd">
<page   orient="vertical"
        xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
        style="background-color: transparent !important; -moz-appearance: none !important;"
        onload="HttpServiceBrowser.startup()">

    <menupopup id="targetmenu" oncommand="HttpServiceBrowser.tcServiceListEventHandler(event);" onpopupshowing="HttpServiceBrowser.tcServiceListEventHandler(event);">
        <menuitem label="&bonjourfoxySidebarOpenDefault.label;" value="current"/>
        <menuitem label="&bonjourfoxySidebarOpenTab.label;" value="tab"/>
        <menuitem label="&bonjourfoxySidebarOpenWindow.label;" value="window"/>
    </menupopup>

    <tree id="tServiceList" flex="1" class="sidebar-placesTree" hidecolumnpicker="true">
        <treecols hide="true">
            <treecol id="title" flex="1" primary="true" hideheader="true"/>
        </treecols>

        <treechildren class="sidebar-placesTreechildren" context="targetmenu" flex="1" id="tcServiceList">
        </treechildren>
    </tree>

<script>
<![CDATA[

var HttpServiceBrowser = {
    bfbrowse: null,
    startup: function() {
        document.getElementById("tcServiceList").addEventListener("click", this.tcServiceListEventHandler, false);
        this.bfbrowse = Components.classes["@bonjourfoxy.net/bfbrowse;1"].createInstance(Components.interfaces.BFBrowse);
        this.bfbrowse.callback = this.newBrowseCallback();
        this.bfbrowse.interfaceIndex = 0;
        this.bfbrowse.registrationType = "_http._tcp";
        this.bfbrowse.registrationDomain = "";
        this.bfbrowse.browse();
    },
    tcServiceListEventHandler: function (event)    {
        var tServiceList = document.getElementById('tServiceList');
        var tcServiceList = document.getElementById('tcServiceList');
        var serviceName = tcServiceList.childNodes[tServiceList.currentIndex].getUserData("serviceName");
        var registrationType = tcServiceList.childNodes[tServiceList.currentIndex].getUserData("registrationType");
        var registrationDomain = tcServiceList.childNodes[tServiceList.currentIndex].getUserData("registrationDomain");
        if (event.type == 'popupshowing') {
            if (serviceName == null || registrationType == null || registrationDomain == null) {
                event.preventDefault();
            }
        }
        if (serviceName == null || registrationType == null || registrationDomain == null) return;
        if (event.type == 'click' || event.type == 'command') {
            if (event.button == 2) return;
            var linkTarget = "default";
            if (event.type == 'command')  {
                linkTarget=event.target.value;
            } else {
                if (event.shiftKey) {
                    linkTarget="window";
                }
                if (event.button == "1") {
                    linkTarget="tab";
                }
            }
            if (linkTarget=="default")  {
                 var prefs = Components.classes["@mozilla.org/preferences-service;1"]
                                .getService(Components.interfaces.nsIPrefService);
                 prefs = prefs.getBranch("extensions.bonjourfoxy.");
                 linkTarget = prefs.getCharPref("target");
            }
            var bfresolve = Components.classes["@bonjourfoxy.net/bfresolve;1"].createInstance(Components.interfaces.BFResolve);
            bfresolve.interfaceIndex = 0;
            bfresolve.registrationType = registrationType;
            bfresolve.registrationDomain = registrationDomain;
            bfresolve.serviceName = serviceName;
            bfresolve.callback = HttpServiceBrowser.newResolveCallback(linkTarget);
            bfresolve.resolve();
        }
    },
    newResolveCallback: function(target)  {
        return function (aError, aInterfaceIndex, aHostname, aPort, aTxtKey, aTxtValue) {
            var urltarget = target;
            if (aError) {
                var prompts = Components.classes["@mozilla.org/embedcomp/prompt-service;1"]
                            .getService(Components.interfaces.nsIPromptService);
                prompts.alert(window, "Error", "Unable to resolve service");
            } else {
                var url = "http://";
                if (aHostname.charAt(aHostname.length-1)==".")  {
                    url = url + aHostname.substr(0,aHostname.length-1);
                } else {
                    url = url + aHostname;
                }
                if (aPort != 80)    {
                    url = url + ":" + aPort;
                }
                if (aTxtKey == "path")  {
                    if (aTxtValue.charAt(0)=="/") {
                        url = url + aTxtValue;
                    } else {
                        url = url + "/" + aTxtValue;
                    }
                } else {
                    url = url + "/";
                }
                switch (urltarget) {
                    case 'tab':
                    case 'window':
                        var win = Components.classes['@mozilla.org/appshell/window-mediator;1']
                            .getService(Components.interfaces.nsIWindowMediator)
                            .getMostRecentWindow('navigator:browser');
                        win.openUILinkIn(url, urltarget);
                    break;
                    case 'current':
                        window._content.location=url;
                    break;
                    default:
                        var prompts = Components.classes["@mozilla.org/embedcomp/prompt-service;1"]
                                    .getService(Components.interfaces.nsIPromptService);
                        prompts.alert(window, "Error", "Bad urltarget: " + urltarget);
                }
            }
        }
    },
    newBrowseCallback: function() {
        var browseServiceRefs = Object()
        return function(aError, aAdd, aInterfaceIndex, aServiceName, aRegistrationType, aRegistrationDomain) {
            var serviceRefs = browseServiceRefs;
            if (!aError)    {
                if (!serviceRefs[aServiceName])   {
                    serviceRefs[aServiceName] = 0;
                }
                if (aAdd)   {
                    serviceRefs[aServiceName]++;
                    if (serviceRefs[aServiceName] == 1)   {
                        var tcServiceList = document.getElementById("tcServiceList");
                        var newTreeCell = document.createElement("treecell");
                        newTreeCell.setAttribute("label", aServiceName);
                        var newTreeRow = document.createElement("treerow");
                        newTreeRow.appendChild(newTreeCell);
                        var newTreeItem = document.createElement("treeitem");
                        newTreeItem.appendChild(newTreeRow);
                        newTreeItem.setUserData("serviceName", aServiceName, null);
                        newTreeItem.setUserData("registrationType", aRegistrationType, null);
                        newTreeItem.setUserData("registrationDomain", aRegistrationDomain, null);
                        tcServiceList.appendChild(newTreeItem);
                    }
                } else {
                    serviceRefs[aServiceName]--;
                    if (serviceRefs[aServiceName] == 0)  {
                        var tcServiceList = document.getElementById("tcServiceList");
                        for (child in tcServiceList.childNodes) {
                            var currentChild = tcServiceList.childNodes[child];
                            // var currentTreeItem = currentChild.getElementsByTagName("treeitem")[0];
                            var currentTreeCell = currentChild.getElementsByTagName("treecell")[0];
                            if (currentTreeCell.getAttribute("label") == aServiceName) {
                                tcServiceList.removeChild(currentChild);
                                break;
                            }
                        }
                    }
                }
            }
        }
    }
}

]]></script>

</page>